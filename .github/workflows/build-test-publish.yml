name: universal pipeline

on:
  workflow_call:
    secrets:
      ANDROID_STOREPASS:
        required: false
      AMO_API_KEY:
        required: false
      AMO_API_SECRET:
        required: false
      NPM_TOKEN:
        required: false
      UV_TOKEN:
        required: false
    inputs:
      root_dir:
        description: "path to project root"
        default: "."
        required: false
        type: string
      tool:
        description: "build tool - ./gradlew || npm || yarn || mvn || uv"
        default: "none"
        required: false
        type: string
      format:
        description: "format script to use"
        default: ""
        required: false
        type: string
      lint:
        description: "lint script to use"
        default: ""
        required: false
        type: string
      install:
        description: "install script to use"
        default: ""
        required: false
        type: string
      test:
        description: "test script to use"
        default: ""
        required: false
        type: string
      build_branch:
        description: "build script to use in branch run"
        default: ""
        required: false
        type: string
      build_main:
        description: "build script to use in main run"
        default: ""
        required: false
        type: string
      post_build_script:
        description: "build script to use in main run"
        default: ""
        required: false
        type: string
      artifact-path:
        description: "path to artifact files to save from build step"
        default: "dist"
        required: false
        type: string
      docker-meta:
        description: "docker metadata as json array ([{name:'docker-image-name',file:'docker/app/Dockerfile'}])"
        default: ""
        required: false
        type: string
      docker_namespace:
        description: "docker namespace"
        required: false
        type: string
        default: "tehw0lf"
      npm_namespace:
        description: "npm namespace"
        required: false
        type: string
        default: "@tehw0lf"
      registry:
        description: "registry"
        required: false
        type: string
        default: "ghcr.io"
      event_name:
        description: "github event name"
        required: true
        type: string
      docker_pre:
        description: "run before building docker image"
        default: ""
        required: false
        type: string
      libraries:
        description: "libraries to publish, separated by comma"
        default: ""
        required: false
        type: string
      library_path:
        description: "path to libraries"
        default: ""
        required: false
        type: string
      platforms:
        description: "platforms to build the docker image for, separated by comma"
        default: "linux/amd64"
        required: false
        type: string
      addon_guid:
        description: "firefox addon guid"
        default: ""
        required: false
        type: string
      xpi_path:
        description: "firefox addon zip path"
        default: ""
        required: false
        type: string
      runner:
        description: "workflow-runner"
        default: "ubuntu-latest"
        required: false
        type: string
      app_root:
        description: "app root"
        default: ""
        required: false
        type: string
jobs:
  build:
    name: build_and_test
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: configure jdk
        if: ${{ inputs.tool == './gradlew' || inputs.tool == 'mvn' }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
      - uses: actions/setup-node@v4
        if: ${{ inputs.tool == 'npm' || inputs.tool == 'yarn' }}
        with:
          node-version: "20"
          cache: "${{ inputs.tool }}"
      - uses: astral-sh/setup-uv@v4
        if: ${{ inputs.tool == 'uv' }}
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - uses: actions/setup-python@v5
        if: ${{ inputs.tool == 'uv' }}
        with:
          python-version-file: "pyproject.toml"
      - name: navigate to root dir
        run: cd ${{ inputs.root_dir }}
      - name: enable nx shas
        if: ${{ success() && hashFiles('./nx.json') != '' }}
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main
      - name: install with npm
        if: ${{ inputs.tool == 'npm' }}
        run: npm ci
      - name: install with yarn
        if: ${{ inputs.tool == 'yarn' }}
        run: yarn install --frozen-lockfile
      - name: install with uv
        if: ${{ inputs.tool == 'uv' }}
        run: uv ${{ inputs.install }}
      - name: format
        if: ${{ inputs.tool != 'none' && inputs.format != '' }}
        run: ${{ inputs.tool }} ${{ inputs.format }}
      - name: lint workspace (if nx)
        if: ${{ inputs.tool != 'none' && success() && hashFiles('./nx.json') != '' }}
        run: "npx nx lint --workspace"
      - name: lint
        if: ${{ inputs.tool != 'none' && inputs.lint != '' }}
        run: ${{ inputs.tool }} ${{ inputs.lint }}
      - name: test
        if: ${{ inputs.tool != 'none' && inputs.test != '' }}
        run: ${{ inputs.tool }} ${{ inputs.test }}
      - name: build on branch
        if: ${{ github.event_name != 'push' && inputs.tool != 'none' && inputs.build_branch != '' }}
        run: ${{ inputs.tool }} ${{ inputs.build_branch }}
      - name: build on main
        if: ${{ github.event_name == 'push' && inputs.tool != 'none' && inputs.build_main != '' }}
        run: ${{ inputs.tool }} ${{ inputs.build_main }}
      - name: post build script on main
        if: ${{ github.event_name == 'push' && inputs.tool != 'none' && inputs.post_build_script != '' }}
        run: ${{ inputs.tool }} ${{ inputs.post_build_script }}
      - name: upload artifact
        if: ${{ github.event_name == 'push' && inputs.artifact-path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}/*

  publish_docker_image:
    name: docker
    if: ${{ github.event_name == 'push' && inputs.docker-meta != '' }}
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: read
      contents: write
      packages: write
    strategy:
      matrix: ${{ fromJson(inputs.docker-meta) }}
    steps:
      - uses: actions/checkout@v4
      - name: create artifact path if it does not exist
        if: ${{ inputs.artifact-path != '' }}
        run: mkdir -p ${{ inputs.artifact-path }}
      - name: download artifact
        if: ${{ inputs.artifact-path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}
      - name: run docker pre script
        if: ${{ inputs.docker_pre != '' }}
        run: ${{ inputs.docker_pre }}
      - name: set up docker
        uses: docker/setup-buildx-action@v3
      - name: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set docker image name
        id: set_docker_image_name
        run: |
          DOCKER_IMAGE_NAME="${{ matrix.name }}"
          echo "image_name=${DOCKER_IMAGE_NAME:-${{ github.event.repository.name }}}" >> $GITHUB_OUTPUT
      - name: build and push image
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.file }}
          push: true
          platforms: ${{ inputs.platforms }}
          tags: ${{ inputs.registry }}/${{ inputs.docker_namespace }}/${{ steps.set_docker_image_name.outputs.image_name }}:latest

  publish_npm_libraries:
    name: publish npm libraries
    if: ${{ github.event_name == 'push' && inputs.libraries != '' && inputs.library_path != '' }}
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: read
      contents: write
      packages: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        if: ${{ inputs.tool == 'npm' || inputs.tool == 'yarn' }}
        with:
          node-version: "20"
          cache: "${{ inputs.tool }}"
      - name: create artifact path if it does not exist
        if: ${{ inputs.artifact-path != '' }}
        run: mkdir -p ${{ inputs.artifact-path }}
      - name: download artifact
        if: ${{ inputs.artifact-path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}
      - name: publish npm libraries
        if: ${{ env.NPM_TOKEN != '' }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          libraries=$(echo ${{ inputs.libraries }} | tr "," "\n")
          for library in $libraries
          do
            latest_version=$(npm view ${{ inputs.npm_namespace }}/"$library" dist-tags.latest)
            package_version=$(jq -r ".version" ${{ inputs.library_path }}/"$library"/package.json)
            if [[ "$latest_version" != "$package_version" ]]; then
              npm publish ${{ inputs.library_path }}/"$library"/ --access public --dry-run
              npm publish ${{ inputs.library_path }}/"$library"/ --access public
            fi
          done
          rm .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish_python_libraries:
    name: publish python libraries
    if: ${{ github.event_name == 'push' && inputs.tool == 'uv'}}
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: write
      contents: write
      packages: read
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        if: ${{ inputs.tool == 'uv' }}
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - uses: actions/setup-python@v5
        if: ${{ inputs.tool == 'uv' }}
        with:
          python-version-file: "pyproject.toml"
      - name: create artifact path if it does not exist
        if: ${{ inputs.artifact-path != '' }}
        run: mkdir -p ${{ inputs.artifact-path }}
      - name: download artifact
        if: ${{ inputs.artifact-path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Release"
          files: |
            ${{ inputs.library_path }}
      - name: publish to pypi
        if: ${{ env.UV_PUBLISH_TOKEN != '' }}
        run: uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.UV_TOKEN }}

  publish_firefox_extension:
    name: publish firefox extension
    if: ${{ github.event_name == 'push' && inputs.addon_guid != '' && inputs.xpi_path != ''}}
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: write
      contents: write
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: create artifact path if it does not exist
        if: ${{ inputs.artifact-path != '' }}
        run: mkdir -p ${{ inputs.artifact-path }}
      - name: download artifact
        if: ${{ inputs.artifact-path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}
      - name: package firefox extension
        run: zip -r ${{ inputs.xpi_path }} * -x .git\* -x .github\*
        shell: bash
      - name: publish firefox extension
        uses: wdzeng/firefox-addon@v1.0.5
        with:
          addon-guid: ${{ inputs.addon_guid }}
          xpi-path: ${{ inputs.xpi_path }}
          self-hosted: false
          jwt-issuer: ${{ secrets.AMO_API_KEY }}
          jwt-secret: ${{ secrets.AMO_API_SECRET }}

  release_android_apk:
    name: release android apk
    if: ${{ github.event_name == 'push' && inputs.app_root != '' }}
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: write
      contents: write
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: create artifact path if it does not exist
        if: ${{ inputs.artifact-path != '' }}
        run: mkdir -p ${{ inputs.artifact-path }}
      - name: download artifact
        if: ${{ inputs.artifact-path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}
      - name: cache keystore
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ inputs.app_root }}/android/app/keystore.jks
          key: keystore-cache
      - name: generate keystore
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        id: generate-keystore
        run: |
          keytool -genkeypair -v \
            -keystore ${{ inputs.app_root }}/android/app/keystore.jks \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -alias my-key \
            -storepass "$ANDROID_STOREPASS" \
            -dname "CN=Android, OU=Development, O=App"
        env:
          ANDROID_STOREPASS: ${{ secrets.ANDROID_STOREPASS }}
      - name: set up jdk
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "21"
      - name: set up android sdk
        uses: android-actions/setup-android@v3
        with:
          packages: "build-tools;34.0.0"
      - name: build apk
        run: |
          cd ${{ inputs.app_root }}/android
          ./gradlew assembleRelease
      - name: sign apk
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore ${{ inputs.app_root }}/android/app/keystore.jks \
            -storepass "$ANDROID_STOREPASS" \
            -keypass "$ANDROID_STOREPASS" \
            ${{ inputs.app_root }}/android/app/build/outputs/apk/release/app-release-unsigned.apk my-key
        env:
          ANDROID_STOREPASS: ${{ secrets.ANDROID_STOREPASS }}
      - name: align apk
        run: |
          ${ANDROID_SDK_ROOT}/build-tools/34.0.0/zipalign -v 4 \
            ${{ inputs.app_root }}/android/app/build/outputs/apk/release/app-release-unsigned.apk \
            ${{ inputs.app_root }}/android/app/build/outputs/apk/release/app-release.apk
      - name: upload apk
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: ${{ inputs.app_root }}/android/app/build/outputs/apk/release/app-release.apk
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "Release"
          files: |
            ${{ inputs.app_root }}/android/app/build/outputs/apk/release/app-release.apk

  release_github:
    name: release android apk
    if: ${{ github.event_name == 'push' && inputs.artifact-path != '' }}
    runs-on: ${{ inputs.runner }}
    permissions:
      actions: write
      contents: write
      packages: read
    steps:
      - name: create artifact path if it does not exist
        run: mkdir -p ${{ inputs.artifact-path }}
      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.artifact-path }}
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Release"
          files: |
            ${{ inputs.artifact-path }}
