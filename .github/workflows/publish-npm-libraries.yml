name: publish npm libraries

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: false
    inputs:
      root_dir:
        description: "path to project root"
        default: "."
        required: false
        type: string
      runner:
        description: "workflow-runner"
        default: "ubuntu-latest"
        required: false
        type: string
      artifact_path:
        description: "path to artifact files to save from build step"
        default: ""
        required: false
        type: string
      tool:
        description: "build tool - npm or yarn"
        default: "none"
        required: false
        type: string
      libraries:
        description: "libraries to publish, separated by comma"
        default: ""
        required: false
        type: string
      library_path:
        description: "path to libraries"
        default: ""
        required: false
        type: string
      npm_namespace:
        description: "npm namespace"
        required: false
        type: string
        default: "@tehw0lf"

jobs:
  publish_npm_libraries:
    name: publish npm libraries
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      packages: read
    defaults:
      run:
        working-directory: ${{ inputs.root_dir }}
    steps:
      - name: check required secrets
        run: |
          if [[ -z "${{ env.NPM_TOKEN }}" ]]; then
            echo "::error::NPM_TOKEN secret is required for npm publishing"
            echo "FAILURE_REASON=missing_secrets" >> $GITHUB_ENV
            exit 2
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/checkout@v5

      - name: check build artifact existence
        uses: softwareforgood/check-artifact-v4-existence@v0
        id: check_artifact_exists
        with:
          name: build

      - name: download build artifact
        if: ${{ inputs.artifact_path != '' && steps.check_artifact_exists.outputs.exists == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ${{ inputs.root_dir }}/${{ inputs.artifact_path }}

      - uses: actions/setup-node@v5
        if: ${{ inputs.tool == 'npm' || inputs.tool == 'yarn' }}
        with:
          node-version: "20"
          cache: "${{ inputs.tool }}"
          cache-dependency-path: |
            ${{ inputs.root_dir }}/package-lock.json
            ${{ inputs.root_dir }}/yarn.lock
            ${{ inputs.root_dir }}/pnpm-lock.yaml

      - name: publish multiple npm libraries
        if: ${{ env.NPM_TOKEN != '' && inputs.libraries != '' && steps.check_artifact_exists.outputs.exists == 'true'}}
        run: |
          echo "::notice::Publishing npm libraries: $LIBRARIES"
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

          # Validate inputs to prevent injection
          if [[ ! "$LIBRARIES" =~ ^[a-zA-Z0-9_,-]+$ ]]; then
            echo "::error::Invalid characters in libraries input. Only alphanumeric, underscore, hyphen, and comma are allowed."
            echo "FAILURE_REASON=invalid_input" >> $GITHUB_ENV
            exit 3
          fi

          libraries=$(echo "$LIBRARIES" | tr "," "\n")
          for library in $libraries
          do
            # Sanitize library name
            library=$(echo "$library" | sed 's/[^a-zA-Z0-9_-]//g')
            if [[ -z "$library" ]]; then
              echo "Skipping empty library name"
              continue
            fi
            
            latest_version=$(npm view "$(jq -r ".name" "${LIBRARY_PATH}/${library}/package.json")" dist-tags.latest 2>/dev/null || echo "0.0.0")
            package_version=$(jq -r ".version" "${LIBRARY_PATH}/${library}/package.json")
            
            if [[ "$latest_version" != "$package_version" ]]; then
              echo "::notice::Publishing $library: $latest_version -> $package_version"
              npm publish "${LIBRARY_PATH}/${library}/" --access public --dry-run
              npm publish "${LIBRARY_PATH}/${library}/" --access public
            else
              echo "::notice::Skipping $library: version $package_version already published"
            fi
          done
          rm .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          LIBRARIES: ${{ inputs.libraries }}
          NPM_NAMESPACE: ${{ inputs.npm_namespace }}
          LIBRARY_PATH: ${{ inputs.library_path }}

      - name: publish single npm library
        if: ${{ env.NPM_TOKEN != '' && inputs.libraries == '' && steps.check_artifact_exists.outputs.exists == 'true'}}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          path_to_package_json=$(find . -name "package.json" | head -n 1)

          latest_version=$(npm view "$(jq -r ".name" "$path_to_package_json")" dist-tags.latest 2>/dev/null || echo "0.0.0")
          package_version=$(jq -r ".version" "$path_to_package_json")

          if [[ "$latest_version" != "$package_version" ]]; then
            if [[ "${LIBRARY_PATH}" == "dist" ]]; then
              npm publish --access public --dry-run
              npm publish --access public
            else
              npm publish "${LIBRARY_PATH}"/ --access public --dry-run
              npm publish "${LIBRARY_PATH}"/ --access public
            fi
          fi
          rm .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_NAMESPACE: ${{ inputs.npm_namespace }}
          LIBRARY_PATH: ${{ inputs.library_path }}
